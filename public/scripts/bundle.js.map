{"version":3,"file":"bundle.js","mappings":";6LAAMA,EAAAA,WACF,WAAYC,EAAMC,gGAAkB,SAChCC,KAAKF,KAAOA,EAAKG,cAAcC,MAAM,IACrCF,KAAKD,iBAAmBA,EACxBC,KAAKG,eAAiB,GACtBH,KAAKI,OAAS,SACjB,qDACD,WAAkB,WACRC,EAAWL,KAAKF,KAAKQ,OAAM,SAAAC,GAAI,OAAI,EAAKJ,eAAeK,SAASD,IAAkB,MAATA,CAA1C,IAEjCP,KAAKD,iBAAmB,EACxBC,KAAKI,OAAS,SACPC,IACPL,KAAKI,OAAS,WAErB,4BACD,WACI,MAAoB,YAAhBJ,KAAKI,OACE,iBAAP,OAAwBJ,KAAKD,kBACN,WAAhBC,KAAKI,OACL,0BAAP,OAAiCJ,KAAKF,KAAKW,KAAK,MACzCT,KAAKI,OAAS,YACd,yCADJ,CAGV,qBACD,WAAa,WAIT,OAHeJ,KAAKF,KAAKY,KAAI,SAAAC,GACzB,OAAO,EAAKR,eAAeK,SAASG,IAA4B,MAAdA,EAAoBA,EAAY,GACrF,IACaF,KAAK,GACtB,0BACD,SAAUG,GACNA,EAAQA,EAAMX,cACd,IAAMY,GAAYb,KAAKG,eAAeK,SAASI,GACzCE,GAAcd,KAAKF,KAAKU,SAASI,GAEnB,YAAhBZ,KAAKI,SAILS,GACAb,KAAKG,eAAeY,KAAKH,GAGzBC,GAAYC,GACZd,KAAKD,mBAETC,KAAKgB,kBACR,4EAhDCnB,sPCCN,m6MADA,IAAMoB,EAAS,gCAAG,WAAOC,GAAP,yFACUC,MAAM,qCAAD,OAAsCD,GAAa,CAAC,GADnE,UAEU,OADlBE,EADQ,QAEDhB,OAFC,iCAGSgB,EAASC,OAHlB,cAGJC,EAHI,yBAIHA,EAAKC,QAJF,cAMJ,IAAIC,MAAM,4BANN,0NAAH,ySCCf,8hGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+XAEA,IAEIC,EAFEC,EAAWC,SAASC,cAAc,WAClCC,EAAYF,SAASC,cAAc,YAGnCE,EAAS,WACXJ,EAASK,UAAY,GACrBF,EAAUG,YAAcP,EAAMQ,cAE9BR,EAAMH,OAAOrB,MAAM,IAAIiC,SAAQ,SAAAC,GAC3B,IAAMC,EAAWT,SAASU,cAAc,QACxCD,EAASJ,YAAcG,EACvBT,EAASY,YAAYF,EACxB,GACJ,EAEDG,OAAOC,iBAAiB,YAAY,SAACC,GACjC,IAAM9B,EAAQ8B,EAAEC,IAChBjB,EAAMkB,UAAUhC,GAChBmB,GACH,IAED,IAAMc,EAAS,gCAAG,oGACO5B,EAAU,GADjB,OACRM,EADQ,OAEdG,EAAQ,IAAI7B,EAAQ0B,EAAQ,GAC5BQ,IAHc,yNAAH,qDAMfH,SAASC,cAAc,UAAUY,iBAAiB,QAASI,GAE3DA","sources":["webpack://boilerplate/./src/hangman.js","webpack://boilerplate/./src/requests.js","webpack://boilerplate/./src/index.js"],"sourcesContent":["class Hangman {\r\n    constructor(word, remainingGuesses) {\r\n        this.word = word.toLowerCase().split('')\r\n        this.remainingGuesses = remainingGuesses\r\n        this.guessedLetters = []\r\n        this.status = 'playing'\r\n    }\r\n    calculateStatus() {\r\n        const finished = this.word.every(char => this.guessedLetters.includes(char) || char === ' ')\r\n    \r\n        if (this.remainingGuesses < 1) {\r\n            this.status = 'failed'\r\n        } else if (finished) {\r\n            this.status = 'finished'\r\n        }\r\n    }\r\n    get statusMessage() {\r\n        if (this.status === 'playing') {\r\n            return `Guesses left: ${this.remainingGuesses}`\r\n        } else if (this.status === 'failed') {\r\n            return `Nice try! The word was ${this.word.join('')}`\r\n        } else if (this.status = 'finished') {\r\n            return `Great work! You guessed the word!`\r\n        }\r\n    }\r\n    get puzzle() {\r\n        const puzzle = this.word.map(character => {\r\n            return this.guessedLetters.includes(character) || character === ' ' ? character : \"*\"\r\n        })\r\n        return puzzle.join('')\r\n    }\r\n    makeGuess(guess) {\r\n        guess = guess.toLowerCase()\r\n        const isUnique = !this.guessedLetters.includes(guess)\r\n        const isBadGuess = !this.word.includes(guess)\r\n    \r\n        if (this.status !== 'playing') {\r\n            return\r\n        }\r\n    \r\n        if (isUnique) {\r\n            this.guessedLetters.push(guess)\r\n        } \r\n    \r\n        if (isUnique && isBadGuess) {\r\n            this.remainingGuesses--\r\n        }\r\n        this.calculateStatus()\r\n    }\r\n}\r\n\r\nexport { Hangman as default }","const getPuzzle = async (wordCount) => {\r\n    const response =  await fetch(`//puzzle.mead.io/puzzle?wordCount=${wordCount}`, {})\r\n    if (response.status === 200) {\r\n        const data = await response.json()\r\n        return data.puzzle\r\n    } else {\r\n        throw new Error('unable to fetch the data')\r\n    }\r\n}\r\n\r\nconst getCountry = async (countryCode) => {\r\n    const response = await fetch('//restcountries.com/v3.1/all', {})\r\n    if (response.status === 200) {\r\n        const countries = await response.json()\r\n        return countries.find(country => country.cca2 === countryCode)\r\n    } else {\r\n        throw new Error('unable to fetch the country data')\r\n    }\r\n}\r\n\r\nconst getLocation = async () => {\r\n    const response = await fetch ('//ipinfo.io/json?token=48d1a33b27d208', {})\r\n    if (response.status === 200) {\r\n        return response.json()\r\n    } else {\r\n        throw new Error('unable to fetch the IP data')\r\n    }\r\n}\r\n\r\nconst getCurrentCountry = async () => {\r\n    const location = await getLocation()\r\n    return getCountry(location.country)\r\n}\r\n\r\nexport { getPuzzle as default }\r\n\r\n// getCurrentCountry().then(country => {\r\n//     console.log(country.name.official);\r\n// }).catch(error => {\r\n//     console.log(error);\r\n// })","import Hangman from './hangman'\r\nimport getPuzzle from './requests'\r\n\r\nconst puzzleEl = document.querySelector('#puzzle')\r\nconst guessesEl = document.querySelector('#guesses')\r\nlet game1\r\n\r\nconst render = () => {\r\n    puzzleEl.innerHTML = ''\r\n    guessesEl.textContent = game1.statusMessage\r\n\r\n    game1.puzzle.split('').forEach(letter => {\r\n        const letterEl = document.createElement('span')\r\n        letterEl.textContent = letter\r\n        puzzleEl.appendChild(letterEl)\r\n    })\r\n}\r\n\r\nwindow.addEventListener('keypress', (e) => {\r\n    const guess = e.key\r\n    game1.makeGuess(guess)\r\n    render()\r\n})\r\n\r\nconst startGame = async () => {\r\n    const puzzle = await getPuzzle(2)\r\n    game1 = new Hangman(puzzle, 5)\r\n    render()\r\n}\r\n\r\ndocument.querySelector('#reset').addEventListener('click', startGame)\r\n\r\nstartGame()"],"names":["Hangman","word","remainingGuesses","this","toLowerCase","split","guessedLetters","status","finished","every","char","includes","join","map","character","guess","isUnique","isBadGuess","push","calculateStatus","getPuzzle","wordCount","fetch","response","json","data","puzzle","Error","i","game1","puzzleEl","document","querySelector","guessesEl","render","innerHTML","textContent","statusMessage","forEach","letter","letterEl","createElement","appendChild","window","addEventListener","e","key","makeGuess","startGame"],"sourceRoot":""}